#include<iostream>
using namespace std;

struct edge
{ int u,v,w;};

class Graph
{public:
  int V,e,s;
  edge E[20];
  int D[20][20],P[20][20];
  Graph()
  { int i,j;
    for(i=1;i<=20;i++)
    { for(j=1;j<=20;j++)
      { if(i==j)
        { D[i][j]=0;
          P[i][j]=-1;}
        else
        { D[i][j]=10000000;
          P[i][j]=i;}}}}};

Graph g;

void floydwarshall()
{ int n=g.V;
  int i,j,k;
  for(k=1;k<=g.V;k++)
  { for(i=1;i<=g.e;i++)
    { for(j=1;j<=g.V;j++)
      { if(g.D[i][j]>(g.D[i][k]+g.D[k][j]))
        { g.D[i][j]=(g.D[i][k]+g.D[k][j]);
          g.P[i][j]=g.P[k][j];}}}}}

int main()
{ cout<<"\nEnter the no' of vertices: ";
  cin>>g.V;
  cout<<"\nEnter the no' of edges: ";
  cin>>g.e;
  cout<<"\nEnter edges:-";
  int i,j;
  for(i=1;i<=g.e;i++)
  { cout<<"\nEnter vertices for edge "<<i<<": ";
    cin>>g.E[i].u>>g.E[i].v;
    cout<<"\nEnter weight: ";
    cin>>g.E[i].w;
    g.D[g.E[i].u][g.E[i].v]=g.E[i].w;}
  floydwarshall();
  cout<<"\nShortest distance matrix:-\n";
  for(i=1;i<=g.V;i++)
  { for(j=1;j<=g.V;j++)
    { cout<<g.D[i][j]<<"\t";}
    cout<<"\n";}
  cout<<"\nShortest path matrix:-\n";
  for(i=1;i<=g.V;i++)
  { for(j=1;j<=g.V;j++)
    { cout<<g.P[i][j]<<"\t";}
    cout<<"\n";}
  return 0;}
